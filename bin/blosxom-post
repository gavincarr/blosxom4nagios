#!/usr/bin/perl
#
# Simple perl script to create a blosxom post entry of a nagios alert
#

use strict;
use Getopt::Std;
use File::Basename;
use File::Spec;
#use File::Path;
use IO::File;
use Logger::Syslog;
use Time::Piece;

my @ARGV1 = ( @ARGV );

my %opts = ();
getopts('c:d:g:h:n:o:s:S:t:v', \%opts);
my $contact = $opts{c};
my $datetime = $opts{d};
my $hostgroup = $opts{g};
my $hostname = $opts{h};
my $output = $opts{o};
my $service = $opts{s};
my $servicegroup = $opts{S};
my $state = $opts{t};
my $notifytype = $opts{T};
my $verbose = $opts{v};

diag("ARGV1: " . join(',', @ARGV1));
diag("ARGV2: " . join(',', @ARGV));

barf("usage: " . basename($0) . " [-h <hostname>] [-g <hostgroup>] [-s <service>] [-S <servicegroup>]
                    [-t <state>] [-n <notifytype>] [-o <output>] [-c <contactname>] <post-directory>\n")
  unless @ARGV;

my $post_dir = shift @ARGV;
barf("Missing posts directory '$post_dir'\n") unless -d $post_dir;
diag("post_dir: $post_dir\n");

# Unset any nagios variable literals
$hostname = ''      if $hostname     && $hostname     =~ m/^\$\w+\$$/;
$hostgroup = ''     if $hostgroup    && $hostgroup    =~ m/^\$\w+\$$/;
$service = ''       if $service      && $service      =~ m/^\$\w+\$$/;
$servicegroup = ''  if $servicegroup && $servicegroup =~ m/^\$\w+\$$/;
$state = ''         if $state        && $state        =~ m/^\$\w+\$$/;
$contact = ''       if $contact      && $contact      =~ m/^\$\w+\$$/;

# If $datetime set, try and parse and reformat
my $t = eval { Time::Piece->strptime($datetime, '%m-%d-%Y-%H:%M:%S') }
  if $datetime;
$t ||= localtime;
$datetime = $t->strftime('%Y%m%dT%H%M%S');
my $epoch = $t->epoch;

# Post to $date subdirectory
#my $date  = substr($datetime,0,6);
#$post_dir = File::Spec->catdir( $post_dir, $date );
#-d $post_dir or mkpath( $post_dir )
#  or barf("Can't mkpath post_dir $post_dir: $!");
#diag("post_dir: $post_dir\n");

# Build filename
my @filename = ();
push @filename, $datetime, $epoch;
push @filename, $service ? 'SERVICE' : 'HOST';
push @filename, $hostname if $hostname;
push @filename, $service  if $service;
push @filename, $state    if $state;
barf("Can't create output filename - aborting") unless @filename;

my $filename = join('-', @filename) . '.txt';
$filename =~ s/\s+/-/g;
diag("filename: $filename\n");

my $post_file = File::Spec->catfile( $post_dir, $filename);
diag("post_file: $post_file\n");

# If post file already exists, we want to merge contacts in that file with ours
if (-f $post_file) {
  my $fh = IO::File->new( $post_file, 'r' )
    or barf("Cannot open post file '$post_file' for reading: $!");
  while (my $header = <$fh>) {
    chomp $header;
    if ($header =~ m/^Contact:\s*(\w.*?)\s*$/) {
      $contact = $contact ? "$1, $contact" : $1;
      $contact = join(', ', sort split(/,\s*/, $contact));
      last;
    }
  }
}

my $fh = IO::File->new( $post_file, 'w' )
  or barf("Cannot open output file '$post_file': $!");

# Setup tags
my @tags = ();
push @tags, $hostname               if $hostname;
push @tags, $hostgroup              if $hostgroup;
push @tags, $service                if $service;
push @tags, $servicegroup           if $servicegroup;
push @tags, $state                  if $state;
push @tags, $contact                if $contact;
push @tags, $service ? 'service' : 'host';

my $tags = join ', ', @tags         if @tags;
diag("tags: $tags\n");

# Output
printf $fh "Title: %s%s %s %s\n",
  $hostgroup ? "$hostgroup/" : '',
  $hostname  ? $hostname : '',
  $service   ? $service : '',
  $state     ? $state : '';
print $fh "Hostname: $hostname\n"           if $hostname;
print $fh "Hostgroup: $hostgroup\n"         if $hostgroup;
print $fh "Service: $service\n"             if $service;
print $fh "Servicegroup: $servicegroup\n"   if $servicegroup;
print $fh "State: $state\n"                 if $state;
print $fh "NotificationType: $notifytype\n" if $notifytype;
print $fh "Date: $datetime\n"               if $datetime;
print $fh "Contact: $contact\n"             if $contact;
print $fh "Tags: $tags\n"                   if $tags;
print $fh "Output: $output\n\n$output\n"    if $output;

close $fh;

diag("done.\n");

# For debugging, warn via syslog
sub diag {
  warning(@_) if $verbose;
}

sub barf {
  error(@_);
  die @_;
}

